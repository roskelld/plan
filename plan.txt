+ Spent the week going through a somewhat painful update from Unreal 5.4.4 to 5.5.4. My blame on it being Unreal has simmered as I found that I hit more issues that were either already in the build or things I've added in belief that it would fix the issues I was seeing from the upgrade.
+ Found a map change crash when objects are on fire. Traced it back to a build called `new new new fire`, I think the issue might be related to the recent fire update. Just a hunch.
+ Fixed crash. Crash was easy to fix, what wasn't was the new crash that crept in due to the cooker not including a gameplayeffect. 
+ Working on a html export of the .plan system so posts are public.
+ Created scripts to generate webpage version of .plan and rss feed.
+ Back on build stability bugs hoping to get 5.5.4 ready to merge with main.
+ Hopefully the last major issue from the 5.5.4 upgrade is fixing the account log on issues.
+ 5.5.4 is now main. Also, added meta tags to the plan so link embeds show the latest post.
+ Cleaned up console warning messages. Feels good. 
+ Working on updating the skelve generation system so layouts have more governance over what is spawned.
+ First public playtest of 5.5.4 build and it went much smoother than last week. One crash relating to saving actors on map change related to missing attribute data. Success overall.
+ Been back on the skelve generation system. Now uses a multipass format: Layout->Content->Block unused entrances. Allows for more passes to be added in future.
+ One big change to the updated skelve generator is layout validity. When attempting to generate a new chamber (level chunk) it tests the space using a box overlap to see if it will fit or reject. 
+ Wrote a SnapToCeiling command for UnrealEd. Why spend a few minutes moving actors, when you can spent a few hours writing and debugging a command. I can see it paying off in the future.
+ Testing an early version of the new Skelve generator. The phase based generation is in now: Layout, content, exit capping. I see some refactoring already that will help give more data that's needed. Next phase is tackling the biome shifting using height as a driver.
+ Test failed successfully. Levels failed to load on clients, I believe due to me using FlushLevelStreaming which stopped code from running until the level load was complete, but this pause caused client sync issues. The test gave us enough to think over things and present a new solution using OnLevelShown delegates to handle future updates, no need to pause code.
+ Added a chamber graph so we eventually spawn chambers with an understanding of their surroundings, helping build out logical spaces using rules instead of generating skelves using pure random items from a lightly filtered list.
+ Rewriting what was the POI spawning system, which I'm now calling the Chamber Props system. It spawns crafted scenes of actors at predefined locations in a skelve with the intention of looking appropriate to the surroundings. The goal is to craft a language using gameplaytags where these can be built independent of location and picked to spawn based on the applied tags. 
+ After a long wait, it's finally time to start working on a v1 rope system. v1 is how we describe the most minimal implementation of an idea to get something tested quick and early. This version of rope will allow players to deploy it down vertical drops where it will then mimic the behaviour of a ladder for others to climb. It will also support collecting to deploy elsewhere. 
+ Tested a very early version of the rope, barely a v1, but it worked as far as showing off the potential of what it's like to explore underground caverns where you can dangle a rope off deep ledges and rappel down into the dark below. Work now continues to polish up the gameplay for that actual v1.
+ Got a bunch of rope fixes done to get characters attached to the rope and facing the right direction. Just setting the actor position/rotation for now and later we can figure out animating them. Next big task is allowing characters to rotate around the rope.
+ Getting into the deep stuff now. Basic setup for rope locomotion is there, but the networking side is weak with client desync issues occurring during collision events. Time to do a deep dive into the Unreal Character Movement Component and the networking code.
+ After a long deep dive into the workings of the CMC we now have a rope climbing movement mode as well as a simple mantle off step. Lots to polish up, but the playtest went well with proving the networking portion stays in sync.  
+ Spent a day trying to debug an issue with a root motion animation not negating the animation offset. This took me on a journey of recreating the skeleton, rigging, skinning and fixing animations only to find that it was just an editor visualization setting and the animation was fine all along. Reverted a bunch of work, but gained new knowledge. 
+ Got a basic handle on setting up root motion animations with a working example of mantling up ledges and other heights. This should aid with player navigation and reduce the reliance on jump serving as a vertical climbing method as jump is meant to be more for crossing distances. 
+ Currently working on getting the camera to follow certain root motion animations when it makes sense. Working example is climbing on to rope from above, which requires the character to perform a 180 rotation onto the rope.
+ Playtest for mantle and rope climb went well for a first pass. Focus can now be put onto bug fixing and improvements to the ux. Players feels more dynamic now they can climb ledges, this might require more adjustments to the environment to ensure we don't start to see too much independence again and lose the group support dynamic. 
+ Though the rope climbing worked, when improving the climb onto rope root motion animation I found I had to do a good amount of rework to improve synchronization. Not perfect, but better now.
+ Spent more time on rope UX. The rope object can now be picked up, deployed and picked up again. Sorry to anyone currently hanging on for dear life, for now you fall.  
+ Updated the chamber generation system to use Unreal's fast tarray serializer to reduce replication overhead by sending delta updates.
+ Working on player inventory interface to improve ux for held, shouldered and attached items.
+ Started a push on updating existing systems to improve interactivity with other systems. First up is door/barriers. Rebuilding class in C++ and adding ability to be blocked by other objects or to deal crushing damage. 
+ Continuing with the barrier update. Most object interaction is handled now, barrier gets blocked by valid actor(s) in its path based on competing sturdiness values or actors get crushed. Next up is to do a host of character/barrier interactions.
+ Working on polishing up character's bracing barrier's open and handling all edge cases and resolve paths (Stopping brace action, stepping away from barrier, etc...)
+ Back from holiday. Spending the day playing and collating bugs as I get my head back into work mode. 
+ Created a trello bug board. Seems that we're at the point now where my manual bug lists are getting too long to keep track of so a more formal set up would help.